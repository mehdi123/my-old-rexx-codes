/**/
trace ?r
st=''
post=''
say 'enter the expression'
pull inf 
in='(' inf ')'   
 do while inf~=''
       tok=nexttoken()
             if isdelimiter(tok) then
                    call updatestack tok
             else
	     post=post tok
 end
 do while st~=''
       call removeandappend
 end
  say post
 return
 updatestack:procedure expose post st
      arg p
   select 
     when p='(' then
           call push p
     when p=')'  then 
            do
	do while st~='' & top()~='('
                        call removeandappend
                 end
	 p=pop()
            end
      otherwise
          do
             do while st~='' & level(p)<=level(top())
		call removeandappend
              end 
              call push p
           end
     end
 return
nexttoken:procedure expose inf
token=substr(inf,1,1)
inf=substr(inf,2)
if ~isdelimiter(token) then
  do 
       tok=token
       do while   ~isdelimiter(tok)
          tok=substr(inf,1,1)
          inf=substr(inf,2)
          token=token||tok
       end
    token=substr(token,1,length(token)-1)
    inf=tok||inf
 end
return token
removeandappend:procedure expose st post
      p=pop()
      post=post p
   return
 isdelimiter:procedure
     arg p
         if pos(p,'+ - * / ( ) ')=0 then
               return 0
                 return 1
 push:procedure expose st
      arg a
      st=st a
  return
 pop:procedure expose st
     p=word(st,1)
     st=subword(st,2)
  return p
top:procedure expose st
  t=word(st,1)
 return t
level:procedure 
  arg p
    select
         when p='*'|p='/' then
                    return 10
         when p='+'|p='-' then
    	    return 5
         when p='('|p=')' then
                    return 1
end    
         	